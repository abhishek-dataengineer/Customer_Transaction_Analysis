--Basic Analysis Questions---
--1.How many total transactions are recorded in the dataset?
SELECT COUNT(*) AS TOTAL_TRANSACTION
FROM TRANSACTIONS


--2	What is the total revenue generated from all transactions?
SELECT SUM(TOTAL_SPENT) AS TOTAL_REVENUE
FROM TRANSACTIONS



--3	Which customers have made the most transactions?
SELECT CUSTOMER_ID, COUNT(*) AS TRANSACTION_COUNT
FROM TRANSACTIONS
GROUP BY CUSTOMER_ID
ORDER BY TRANSACTION_COUNT DESC
LIMIT 5;


--4	How many transactions occurred in the last 6 months?
SELECT COUNT(*) AS RECENT_TRANSACTION
FROM TRANSACTIONS
WHERE TRANSACTION_DATE >= CURRENT_DATE - INTERVAL '6 MONTHS';


--5	What is the average amount spent per transaction?
SELECT ROUND(AVG(TOTAL_SPENT),2) AS AVG_AMOUNT
FROM TRANSACTIONS



--Intermediate Analysis Questions
--6. Which customer has spent the most money overall?
SELECT CUSTOMER_ID, SUM(TOTAL_SPENT) AS TOTAL_SPENT
FROM TRANSACTIONS
GROUP BY CUSTOMER_ID
ORDER BY TOTAL_SPENT DESC
LIMIT 1


--7	Which payment method is used the most?
SELECT PAYMENT_METHOD, COUNT(*) AS USAGE_COUNT
FROM TRANSACTIONS
GROUP BY PAYMENT_METHOD
ORDER BY USAGE_COUNT DESC
LIMIT 1;


--8	Which customers have spent more than the average total spending?
SELECT CUSTOMER_ID, SUM(TOTAL_SPENT) AS TOTAL_SPENT
FROM TRANSACTIONS
GROUP BY CUSTOMER_ID
HAVING SUM(TOTAL_SPENT) > (SELECT AVG(TOTAL_SPENT) FROM TRANSACTIONS)


--9	Which product category contributes the highest revenue?
SELECT CATEGORY_TYPE, SUM(TOTAL_SPENT) AS TOTAL_REVENUE
FROM TRANSACTIONS
GROUP BY CATEGORY_TYPE
ORDER BY TOTAL_REVENUE DESC
LIMIT 1;


-- 10 What percentage of transactions had a discount applied?
SELECT (SUM(CASE
				WHEN DISCOUNT_APPLIED THEN 1 ELSE 0 END) * 100.0/ COUNT(*)) AS DISCOUNT_PERCENTAGE

FROM TRANSACTIONS;



--Advanced Analysis Questions
--11 Rank customers based on their total spending.
SELECT CUSTOMER_ID, SUM(TOTAL_SPENT) AS TOTAL_SPENT,
		RANK() OVER (ORDER BY SUM(TOTAL_SPENT) DESC) AS SPENDING_RANK
FROM TRANSACTIONS
GROUP BY CUSTOMER_ID;



--12 Find the first and last purchase date for each customer.
WITH CUSTOMER_PURCHASES AS (
	SELECT CUSTOMER_ID, TRANSACTION_DATE,
	FIRST_VALUE(TRANSACTION_DATE) OVER(PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE ASC) AS FIRST_PURCHASE,
	LAST_VALUE(TRANSACTION_DATE) OVER(PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_PURCHASE
	FROM TRANSACTIONS
)

SELECT DISTINCT CUSTOMER_ID, FIRST_PURCHASE, LAST_PURCHASE
FROM CUSTOMER_PURCHASES;



--13 How long do customers take to make their next purchase?
SELECT CUSTOMER_ID, TRANSACTION_DATE,
	LEAD(TRANSACTION_DATE) OVER (PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) AS NEXT_PURCHASE_DATE,
	LEAD(TRANSACTION_DATE) OVER(PARTITION BY CUSTOMER_ID ORDER BY TRANSACTION_DATE) - TRANSACTION_DATE AS DAYS_BETWEEN_PURCHASES
FROM TRANSACTIONS;



--14 Analyze monthly revenue trends and compare them to the previous month.
WITH MONTHLY_REVENUE AS(
	SELECT DATE_TRUNC('MONTH', TRANSACTION_DATE) AS MONTH, SUM(TOTAL_SPENT) AS TOTAL_REVENUE
	FROM TRANSACTIONS
	GROUP BY MONTH
)

SELECT MONTH, TOTAL_REVENUE,
		LAG(TOTAL_REVENUE) OVER (ORDER BY MONTH) AS PREV_MONTH_REVENUE,
		TOTAL_REVENUE - LAG(TOTAL_REVENUE) OVER (ORDER BY MONTH) AS REVENUE_CHANGE
FROM MONTHLY_REVENUE;




--15 Which customers have not made a purchase in the last 6 months?
SELECT CUSTOMER_ID
FROM TRANSACTIONS
GROUP BY CUSTOMER_ID
HAVING MAX(TRANSACTION_DATE) < CURRENT_DATE - INTERVAL '6 MONTHS';










	














	
















